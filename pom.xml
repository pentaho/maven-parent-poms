<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.pentaho</groupId>
  <artifactId>pentaho-parent-pom</artifactId>
  <version>9.1.0.0-SNAPSHOT</version>

  <packaging>pom</packaging>

  <!--
    NOTICE!  Please consider this to be an abstract parent pom and DO NOT inherit from it directly.

    use pentaho-ce-parent-pom, or something extending from it, for public projects
   -->

  <name>Pentaho Project Parent Pom</name>
  <description>top-level abstract parent pom for all Pentaho CE projects</description>
  <url>http://wwww.pentaho.org</url>

  <licenses>
    <license>
      <name>Apache License, Version 2.0</name>
      <url>http://www.apache.org/licenses/LICENSE-2.0</url>
      <distribution>repo</distribution>
    </license>
  </licenses>

  <scm>
    <developerConnection>scm:git:git@github.com:pentaho/maven-parent-poms.git</developerConnection>
    <url>https://github.com/pentaho/maven-parent-poms</url>
    <tag>HEAD</tag>
  </scm>

  <modules>
    <module>pentaho-ce-parent-pom</module>
  </modules>

  <organization>
    <name>Hitachi Vantara</name>
    <url>http://www.pentaho.com</url>
  </organization>

  <developers>
    <developer>
      <name>Pentaho Build Team</name>
      <email>buildteam@pentaho.com</email>
      <roles>
        <role>creator</role>
        <role>maintainer</role>
      </roles>
    </developer>
  </developers>

  <issueManagement>
    <system>JIRA</system>
    <url>http://jira.pentaho.com</url>
  </issueManagement>

  <ciManagement>
    <system>Jenkins</system>
    <url>http://ci.pentaho.com</url>
  </ciManagement>

  <properties>
    <copyright.year>2020</copyright.year>

    <!-- VERSIONS -->
    <slf4j.version>1.7.12</slf4j.version>
    <logback.version>1.2.0</logback.version>
    <log4j.version>1.2.17</log4j.version>
    <commons-logging.version>1.2</commons-logging.version>
    <postgresql.version>42.2.5</postgresql.version>

    <osgi.core.version>6.0.0</osgi.core.version>
    <osgi.compendium.version>5.0.0</osgi.compendium.version>

    <karaf.version>4.2.6</karaf.version>

    <felix.http.api.version>3.0.0</felix.http.api.version>
    <felix.http.proxy.version>3.0.6</felix.http.proxy.version>
    <felix.http.bridge.version>4.0.6</felix.http.bridge.version>

    <aries.blueprint.api.version>1.0.1</aries.blueprint.api.version>
    <aries.blueprint.core.version>1.10.2</aries.blueprint.core.version>

    <pax-web.version>7.2.10</pax-web.version>
    <pax-url-aether.version>2.6.1</pax-url-aether.version>

    <cxf.version>3.3.1</cxf.version>

    <activemq.version>5.15.11</activemq.version>

    <derby.version>10.14.2.0</derby.version>

    <jacoco-maven-plugin.version>0.8.1</jacoco-maven-plugin.version>
    <maven-clean-plugin.version>3.1.0</maven-clean-plugin.version>
    <maven-deploy-plugin.version>2.8.2</maven-deploy-plugin.version>
    <maven-install-plugin.version>2.5.2</maven-install-plugin.version>
    <maven-release-plugin.version>2.5.3</maven-release-plugin.version>
    <maven-site-plugin.version>3.7.1</maven-site-plugin.version>
    <maven-dependency-plugin.version>3.1.0</maven-dependency-plugin.version>
    <build-helper-maven-plugin.version>3.1.0-pentaho</build-helper-maven-plugin.version>
    <requirejs-maven-plugin.version>2.0.4</requirejs-maven-plugin.version>
    <frontend-maven-plugin.version>1.6</frontend-maven-plugin.version>
    <maven-antrun-plugin.version>1.8</maven-antrun-plugin.version>
    <iterator-maven-plugin.version>0.5.1</iterator-maven-plugin.version>
    <maven-assembly-plugin.version>3.1.1</maven-assembly-plugin.version>
    <maven-checkstyle-plugin.version>2.17</maven-checkstyle-plugin.version>
    <maven-compiler-plugin.version>3.7.0</maven-compiler-plugin.version>
    <maven-failsafe-plugin.version>2.21.0</maven-failsafe-plugin.version>
    <maven-jar-plugin.version>2.6</maven-jar-plugin.version>
    <maven-javadoc-plugin.version>3.0.0</maven-javadoc-plugin.version>
    <maven-jxr-plugin.version>2.5</maven-jxr-plugin.version>
    <maven-project-info-reports-plugin.version>2.9</maven-project-info-reports-plugin.version>
    <maven-resources-plugin.version>3.0.2</maven-resources-plugin.version>
    <maven-remote-resources-plugin.version>1.6.0</maven-remote-resources-plugin.version>
    <maven-source-plugin.version>3.0.1</maven-source-plugin.version>
    <maven-surefire-plugin.version>2.21.0</maven-surefire-plugin.version>
    <maven-surefire-report-plugin.version>2.21.0</maven-surefire-report-plugin.version>
    <maven-verifier-plugin.version>1.1</maven-verifier-plugin.version>
    <sonar-maven-plugin.version>3.5.0.1254</sonar-maven-plugin.version>
    <license-helper-maven-plugin.version>1.27</license-helper-maven-plugin.version>
    <maven-war-plugin.version>3.2.0</maven-war-plugin.version>
    <maven-bundle-plugin.version>2.5.3</maven-bundle-plugin.version>

    <karaf-maven-plugin.version>4.2.6</karaf-maven-plugin.version>
    <hitachi-karaf-maven-plugin.version>4.2.6-R2</hitachi-karaf-maven-plugin.version>
    <karaf-maven-plugin.enableGeneration>true</karaf-maven-plugin.enableGeneration>
    <karaf-maven-plugin.aggregateFeatures>false</karaf-maven-plugin.aggregateFeatures>
    <karaf-maven-plugin.includeTransitiveDependency>true</karaf-maven-plugin.includeTransitiveDependency>
    <karaf-maven-plugin.addBundlesToPrimaryFeature>true</karaf-maven-plugin.addBundlesToPrimaryFeature>
    <karaf-maven-plugin.archiveTarGz>false</karaf-maven-plugin.archiveTarGz>
    <karaf-maven-plugin.archiveZip>true</karaf-maven-plugin.archiveZip>
    <karaf-maven-plugin.markTransitiveAsDependency>true</karaf-maven-plugin.markTransitiveAsDependency>
    <karaf-maven-plugin.primaryFeatureName>${project.artifactId}</karaf-maven-plugin.primaryFeatureName>
    <karaf-maven-plugin.prerequisiteFeatures></karaf-maven-plugin.prerequisiteFeatures>

    <nodejs.version>v10.0.0</nodejs.version>
    <npm.version>5.7.1</npm.version>
    <requirejs.version>2.3.6</requirejs.version>
    <bootstrap.version>3.4.1</bootstrap.version>

    <!-- When changing the jQuery version, be sure to rename/adapt the corresponding AMD "overrides" file:
         pentaho-osgi-bundles/pentaho-webjars-deployer/src/main/resources/overrides/org.webjars.npm/jquery/3.4.1/overrides.json
     -->
    <jquery.version>3.4.1</jquery.version>
    <jquery-ui.version>1.12.1</jquery-ui.version>

    <!-- When changing the Angular version, be sure to rename/adapt the corresponding AMD "overrides" files:
         pentaho-osgi-bundles/pentaho-webjars-deployer/src/main/resources/overrides/org.webjars.bower/angular/1.7.8/overrides.json
     -->
    <angular.version>1.7.8</angular.version>
    <angular-translate.version>2.18.1</angular-translate.version>
    <angular-ui-bootstrap-bower.version>1.3.3</angular-ui-bootstrap-bower.version>
    <uirouter-core.version>5.0.23</uirouter-core.version>
    <uirouter-angularjs.version>1.0.22</uirouter-angularjs.version>

    <fancyapps__fancybox.version>3.5.5</fancyapps__fancybox.version>

    <codehaus-jackson.version>1.9.13</codehaus-jackson.version>
    <fasterxml-jackson.version>2.9.10</fasterxml-jackson.version>
    <fasterxml-jackson-databind.version>2.9.10.2</fasterxml-jackson-databind.version>
    <dom4j.version>2.1.1</dom4j.version>
    <jaxen.version>1.1.6</jaxen.version>
    <xstream.version>1.4.11.1</xstream.version>
    <jackrabbit.version>2.16.5</jackrabbit.version>
    <commons-compress.version>1.18</commons-compress.version>
    <commons-fileupload.version>1.4</commons-fileupload.version>
    <commons-vfs2.version>2.3</commons-vfs2.version>
    <aws-java-sdk.version>1.11.516</aws-java-sdk.version>
    <jetty.version>9.4.18.v20190429</jetty.version>
    <httpclient.version>4.5.9</httpclient.version>
    <httpcore.version>4.4.11</httpcore.version>
    <paho.version>1.2.2</paho.version>
    <tomcat.version>8.5.50</tomcat.version>

    <!-- spring version -->
    <spring.version>4.3.22.RELEASE</spring.version>
    <spring-ldap.version>2.3.2.RELEASE</spring-ldap.version>
    <spring-binding.version>2.4.8.RELEASE</spring-binding.version>
    <spring-se-jcr.version>0.9</spring-se-jcr.version>
    <spring-mock.version>2.0.8</spring-mock.version>
    <spring-osgi.version>1.2.1</spring-osgi.version>
    <spring-security.version>4.2.9.RELEASE</spring-security.version>
    <spring-security-core-tests.version>2.0.5.RELEASE</spring-security-core-tests.version>
    <spring-retry.version>1.2.2.RELEASE</spring-retry.version>
    <spring-boot.version>1.5.16.RELEASE</spring-boot.version>
    <spring-security-kerberos.version>1.0.1.RELEASE</spring-security-kerberos.version>
    <karaf-springframework-override.version>4.1.9.RELEASE_1</karaf-springframework-override.version>

    <xercesImpl.version>2.12.0</xercesImpl.version>
    <xml-apis.version>1.4.01</xml-apis.version>

    <enunciate-jersey-rt.version>1.27</enunciate-jersey-rt.version>

    <!-- jdk version -->
    <source.jdk.version>1.8</source.jdk.version>
    <target.jdk.version>1.8</target.jdk.version>
    <maven.compiler.source>${source.jdk.version}</maven.compiler.source>
    <maven.compiler.target>${target.jdk.version}</maven.compiler.target>
    <compilerArgument/>
    <checkstyle.version>8.0</checkstyle.version>
    <coding-standards.version>9.1.0.0-SNAPSHOT</coding-standards.version>
    <spotbugs.version>3.1.3</spotbugs.version>
    <appscan-maven-plugin.version>1.0.3</appscan-maven-plugin.version>
    <dependency-check-maven.version>5.2.2</dependency-check-maven.version>

    <!-- Monitoring versions -->
    <!-- Guava Event Bus version must be the same throughout all components of Monitoring otherwise service references
         won't be properly satisfied.
         The version must be no higher than 17.0 because newer versions include final methods which prevents the class
         from being proxied in OSGi blueprint services. -->
    <guava.monitoring.version>17.0</guava.monitoring.version>
    <camel.version>2.17.7</camel.version>

    <!-- PHASE BINDINGS -->
    <set-highest-basedir-phase>initialize</set-highest-basedir-phase>
    <node-npm_install-phase>initialize</node-npm_install-phase>
    <eula-wrap_assign-deps-to-properties-phase>initialize</eula-wrap_assign-deps-to-properties-phase>
    <javascript_unpack-rjs-phase>initialize</javascript_unpack-rjs-phase>
    <javascript_unpack-dependencies-phase>initialize</javascript_unpack-dependencies-phase>
    <javascript_transpile_custom_properties-phase>validate</javascript_transpile_custom_properties-phase>
    <javascript_override-profilebuilder-phase>process-resources</javascript_override-profilebuilder-phase>
    <bundle-javascript_optimize-phase>generate-sources</bundle-javascript_optimize-phase>
    <bundle-javascript_transpile_optimize-phase>generate-sources</bundle-javascript_transpile_optimize-phase>
    <bundle-javascript_add-resource-phase>process-sources</bundle-javascript_add-resource-phase>
    <bundle-sass_optimize-phase>process-sources</bundle-sass_optimize-phase>
    <bundle-javascript_unpack-rjs-phase>initialize</bundle-javascript_unpack-rjs-phase>
    <generate-bundle-manifest-phase>compile</generate-bundle-manifest-phase>
    <javascript-transpile_cleanup-phase>compile</javascript-transpile_cleanup-phase>
    <javascript-test_copy-resources-phase>generate-test-resources</javascript-test_copy-resources-phase>
    <javascript-test_npm-install-phase>generate-test-resources</javascript-test_npm-install-phase>
    <test-unit-execute-phase>test</test-unit-execute-phase>
    <javascript-test_karma-phase>test</javascript-test_karma-phase>
    <javascript-requirecfg_aggregate-phase>prepare-package</javascript-requirecfg_aggregate-phase>
    <javascript_optimize-phase>prepare-package</javascript_optimize-phase>
    <assembly_package-phase>package</assembly_package-phase>
    <assembly_appendId>false</assembly_appendId>
    <javascript-assembly_package-phase>package</javascript-assembly_package-phase>
    <test-integration_add-resources-phase>pre-integration-test</test-integration_add-resources-phase>
    <test-integration_add-source-phase>pre-integration-test</test-integration_add-source-phase>
    <test-integration_compile-phase>pre-integration-test</test-integration_compile-phase>
    <test-integration_execute-phase>integration-test</test-integration_execute-phase>
    <eula-wrap_create-izpack-installer-jar-phase>verify</eula-wrap_create-izpack-installer-jar-phase>
    <eula-wrap_create-dist-phase>verify</eula-wrap_create-dist-phase>
    <eula-wrap_attach-dist-phase>verify</eula-wrap_attach-dist-phase>
    <attach-sources-phase>verify</attach-sources-phase>
    <test-integration_report-phase>verify</test-integration_report-phase>
    <javascript-doc_copy-resources-phase>pre-site</javascript-doc_copy-resources-phase>

    <!-- Node and npm root repositoryies -->
    <nodeDownloadRoot>http://orl-jfrog-lb.pentaho.net/artifactory/nodejs-dist/</nodeDownloadRoot>
    <npmDownloadRoot>http://orl-jfrog-lb.pentaho.net/artifactory/npm-release/npm/-/</npmDownloadRoot>

    <pentaho.resolve.repo>http://orl-jfrog-lb.pentaho.net/artifactory/pnt-mvn</pentaho.resolve.repo>
    <!-- No default repository URL deployments, these must be defined at build-time -->
    <pentaho.public.release.repo />
    <pentaho.public.snapshot.repo />
    <pentaho.private.release.repo />
    <pentaho.private.snapshot.repo />

    <pentaho.docker.pull.host>pnt-docker.orl-jfrog-lb.pentaho.net/</pentaho.docker.pull.host>
    <!-- No default docker push repository, it must be defined at build-time -->
    <pentaho.docker.push.host>${pentaho.docker.public.push.host}</pentaho.docker.push.host>

    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

    <build.javascriptSourceDirectory>${basedir}/src/main/javascript</build.javascriptSourceDirectory>
    <build.javascriptOutputDirectory>${project.build.directory}/javascriptOutput</build.javascriptOutputDirectory>
    <build.transpiledJavascriptOutputDirectory>${project.build.directory}/transpiledJavascriptOutput</build.transpiledJavascriptOutputDirectory>
    <build.javascriptConfigDirectory>${basedir}/src/main/config/javascript</build.javascriptConfigDirectory>

    <build.javascriptTestSourceDirectory>${basedir}/src/test/javascript</build.javascriptTestSourceDirectory>
    <build.javascriptTestOutputDirectory>${project.build.directory}/test-javascript</build.javascriptTestOutputDirectory>
    <build.javascriptTestConfigDirectory>${basedir}/src/test/config/javascript</build.javascriptTestConfigDirectory>

    <jenkins.javascript-test_karma.reportsDirectory>${basedir}/target/js-reports</jenkins.javascript-test_karma.reportsDirectory>

    <build.dependenciesDirectory>${project.build.directory}/dependency</build.dependenciesDirectory>

    <pentaho-js-build.dir>${build.dependenciesDirectory}/pentaho-js-build</pentaho-js-build.dir>
    <rjs.webjar.file>${build.dependenciesDirectory}/META-INF/resources/webjars/requirejs/${requirejs.version}/bin/r.js</rjs.webjar.file>

    <requirejs.build.file>build.js</requirejs.build.file>
    <js.project.list>dummy</js.project.list>

    <!-- Set to true if javascript sources need to be transpiled (e.g.: if it uses es6) -->
    <js.transpile.project>false</js.transpile.project>

    <!-- Set to true if using sass for styling.project needs to be transpiled (e.g.: if it uses es6) -->
    <css.sass.project>false</css.sass.project>

    <docjs.config.file />

    <frontend-maven-plugin.workingDirectory>${project.rootdir}</frontend-maven-plugin.workingDirectory>
    <frontend-maven-plugin.installDirectory>${frontend-maven-plugin.workingDirectory}/target</frontend-maven-plugin.installDirectory>

    <!-- License Configuration -->
    <license.organizationName>Hitachi Vantara</license.organizationName>
    <license.inceptionYear>2002</license.inceptionYear>
    <license.licenseFile>LICENSE.txt</license.licenseFile>
    <license.bundleLicenseFile>META-INF/LICENSE.txt</license.bundleLicenseFile>
    <license.failOnLicenseCheck>false</license.failOnLicenseCheck>

    <!-- Chechstyle configuration -->
    <!--  configuration file comes from coding-standards artifact -->
    <checkstyle.configLocation>checkstyle/pentaho_checks.xml</checkstyle.configLocation>
    <checkstyle.consoleOutput>true</checkstyle.consoleOutput>
    <checkstyle.linkXRef>true</checkstyle.linkXRef>
    <pentaho-eula-wrap-config.version>9.1.0.0-SNAPSHOT</pentaho-eula-wrap-config.version>

    <!-- Documentation properties -->
    <!-- parsedVersion.* properties are dynamically created by the build-helper-maven-plugin:create-doc-version-property -->
    <doc.version>${parsedVersion.majorVersion}.${parsedVersion.minorVersion}</doc.version>
    <doc.base.url>https://help.pentaho.com/Documentation/${doc.version}</doc.base.url>

    <!-- SonarQube general configuration -->
    <sonar.dependencyCheck.reportPath>${project.build.directory}/dependency-check-report.xml</sonar.dependencyCheck.reportPath>
    <sonar.dependencyCheck.htmlReportPath>${project.build.directory}/dependency-check-report.html</sonar.dependencyCheck.htmlReportPath>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.eclipse.jetty</groupId>
        <artifactId>jetty-continuation</artifactId>
        <version>${jetty.version}</version>
      </dependency>
      <dependency>
        <groupId>org.eclipse.jetty</groupId>
        <artifactId>jetty-http</artifactId>
        <version>${jetty.version}</version>
      </dependency>
      <dependency>
        <groupId>org.eclipse.jetty</groupId>
        <artifactId>jetty-io</artifactId>
        <version>${jetty.version}</version>
      </dependency>
      <dependency>
        <groupId>org.eclipse.jetty</groupId>
        <artifactId>jetty-jaas</artifactId>
        <version>${jetty.version}</version>
      </dependency>
      <dependency>
        <groupId>org.eclipse.jetty</groupId>
        <artifactId>jetty-plus</artifactId>
        <version>${jetty.version}</version>
      </dependency>
      <dependency>
        <groupId>org.eclipse.jetty</groupId>
        <artifactId>jetty-security</artifactId>
        <version>${jetty.version}</version>
      </dependency>
      <dependency>
        <groupId>org.eclipse.jetty</groupId>
        <artifactId>jetty-server</artifactId>
        <version>${jetty.version}</version>
      </dependency>
      <dependency>
        <groupId>org.eclipse.jetty</groupId>
        <artifactId>jetty-servlet</artifactId>
        <version>${jetty.version}</version>
      </dependency>
      <dependency>
        <groupId>org.eclipse.jetty</groupId>
        <artifactId>jetty-servlets</artifactId>
        <version>${jetty.version}</version>
      </dependency>
      <dependency>
        <groupId>org.eclipse.jetty</groupId>
        <artifactId>jetty-util</artifactId>
        <version>${jetty.version}</version>
      </dependency>
      <dependency>
        <groupId>org.eclipse.jetty</groupId>
        <artifactId>jetty-util-ajax</artifactId>
        <version>${jetty.version}</version>
      </dependency>
      <dependency>
        <groupId>org.eclipse.jetty</groupId>
        <artifactId>jetty-xml</artifactId>
        <version>${jetty.version}</version>
      </dependency>
      <dependency>
        <groupId>org.eclipse.jetty</groupId>
        <artifactId>jetty-webapp</artifactId>
        <version>${jetty.version}</version>
      </dependency>
      <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-api</artifactId>
        <version>${slf4j.version}</version>
      </dependency>
      <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-log4j12</artifactId>
        <version>${slf4j.version}</version>
      </dependency>
      <dependency>
        <groupId>ch.qos.logback</groupId>
        <artifactId>logback-core</artifactId>
        <version>${logback.version}</version>
      </dependency>
      <dependency>
        <groupId>ch.qos.logback</groupId>
        <artifactId>logback-classic</artifactId>
        <version>${logback.version}</version>
      </dependency>
      <dependency>
        <groupId>log4j</groupId>
        <artifactId>log4j</artifactId>
        <version>${log4j.version}</version>
      </dependency>
      <dependency>
        <groupId>log4j</groupId>
        <artifactId>apache-log4j-extras</artifactId>
        <version>${log4j.version}</version>
      </dependency>
      <dependency>
        <groupId>commons-logging</groupId>
        <artifactId>commons-logging</artifactId>
        <version>${commons-logging.version}</version>
      </dependency>
      <dependency>
        <groupId>org.postgresql</groupId>
        <artifactId>postgresql</artifactId>
        <version>${postgresql.version}</version>
      </dependency>

      <dependency>
        <groupId>org.osgi</groupId>
        <artifactId>org.osgi.core</artifactId>
        <version>${osgi.core.version}</version>
        <scope>provided</scope>
      </dependency>
      <dependency>
        <groupId>org.osgi</groupId>
        <artifactId>org.osgi.compendium</artifactId>
        <version>${osgi.compendium.version}</version>
        <scope>provided</scope>
      </dependency>

      <dependency>
        <groupId>org.apache.karaf</groupId>
        <artifactId>org.apache.karaf.main</artifactId>
        <version>${karaf.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.karaf</groupId>
        <artifactId>org.apache.karaf.util</artifactId>
        <version>${karaf.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.karaf.features</groupId>
        <artifactId>org.apache.karaf.features.core</artifactId>
        <version>${karaf.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.karaf.kar</groupId>
        <artifactId>org.apache.karaf.kar.core</artifactId>
        <version>${karaf.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.karaf.bundle</groupId>
        <artifactId>org.apache.karaf.bundle.core</artifactId>
        <version>${karaf.version}</version>
      </dependency>

      <dependency>
        <groupId>org.apache.karaf.jaas</groupId>
        <artifactId>org.apache.karaf.jaas.boot</artifactId>
        <version>${karaf.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.karaf.jaas</groupId>
        <artifactId>org.apache.karaf.jaas.modules</artifactId>
        <version>${karaf.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.karaf.jaas</groupId>
        <artifactId>org.apache.karaf.jaas.config</artifactId>
        <version>${karaf.version}</version>
      </dependency>

      <dependency>
        <groupId>org.apache.karaf.diagnostic</groupId>
        <artifactId>org.apache.karaf.diagnostic.boot</artifactId>
        <version>${karaf.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.karaf.specs</groupId>
        <artifactId>org.apache.karaf.specs.activator</artifactId>
        <version>${karaf.version}</version>
      </dependency>

      <dependency>
        <groupId>org.apache.aries.blueprint</groupId>
        <artifactId>org.apache.aries.blueprint.api</artifactId>
        <version>${aries.blueprint.api.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.aries.blueprint</groupId>
        <artifactId>org.apache.aries.blueprint.core</artifactId>
        <version>${aries.blueprint.core.version}</version>
      </dependency>

      <dependency>
        <groupId>org.ops4j.pax.web</groupId>
        <artifactId>pax-web-spi</artifactId>
        <version>${pax-web.version}</version>
        <scope>provided</scope>
      </dependency>

      <dependency>
        <groupId>org.ops4j.pax.url</groupId>
        <artifactId>pax-url-aether</artifactId>
        <version>${pax-url-aether.version}</version>
      </dependency>

      <dependency>
        <groupId>org.codehaus.jackson</groupId>
        <artifactId>jackson-jaxrs</artifactId>
        <version>${codehaus-jackson.version}</version>
        <exclusions>
          <exclusion>
            <groupId>*</groupId>
            <artifactId>*</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>org.codehaus.jackson</groupId>
        <artifactId>jackson-mapper-asl</artifactId>
        <version>${codehaus-jackson.version}</version>
      </dependency>
      <dependency>
        <groupId>org.codehaus.jackson</groupId>
        <artifactId>jackson-core-asl</artifactId>
        <version>${codehaus-jackson.version}</version>
      </dependency>
      <dependency>
        <groupId>org.codehaus.jackson</groupId>
        <artifactId>jackson-xc</artifactId>
        <version>${codehaus-jackson.version}</version>
      </dependency>

      <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-core</artifactId>
        <version>${fasterxml-jackson.version}</version>
      </dependency>
      <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-annotations</artifactId>
        <version>${fasterxml-jackson.version}</version>
      </dependency>
      <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-databind</artifactId>
        <version>${fasterxml-jackson-databind.version}</version>
      </dependency>
      <dependency>
        <groupId>com.fasterxml.jackson.jaxrs</groupId>
        <artifactId>jackson-jaxrs-json-provider</artifactId>
        <version>${fasterxml-jackson.version}</version>
      </dependency>
      <dependency>
        <groupId>com.fasterxml.jackson.jaxrs</groupId>
        <artifactId>jackson-jaxrs-base</artifactId>
        <version>${fasterxml-jackson.version}</version>
      </dependency>
      <dependency>
        <groupId>com.fasterxml.jackson.module</groupId>
        <artifactId>jackson-module-jaxb-annotations</artifactId>
        <version>${fasterxml-jackson.version}</version>
      </dependency>
      <dependency>
        <groupId>com.fasterxml.jackson.dataformat</groupId>
        <artifactId>jackson-dataformat-yaml</artifactId>
        <version>${fasterxml-jackson.version}</version>
      </dependency>
      <dependency>
        <groupId>com.fasterxml.jackson.dataformat</groupId>
        <artifactId>jackson-dataformat-smile</artifactId>
        <version>${fasterxml-jackson.version}</version>
      </dependency>
      <dependency>
        <groupId>com.fasterxml.jackson.dataformat</groupId>
        <artifactId>jackson-dataformat-cbor</artifactId>
        <version>${fasterxml-jackson.version}</version>
      </dependency>
      <dependency>
        <groupId>com.fasterxml.jackson.jr</groupId>
        <artifactId>jackson-jr-objects</artifactId>
        <version>${fasterxml-jackson.version}</version>
      </dependency>

      <dependency>
        <groupId>org.dom4j</groupId>
        <artifactId>dom4j</artifactId>
        <version>${dom4j.version}</version>
      </dependency>
      <dependency>
        <groupId>jaxen</groupId>
        <artifactId>jaxen</artifactId>
        <version>${jaxen.version}</version>
      </dependency>

      <dependency>
        <groupId>com.thoughtworks.xstream</groupId>
        <artifactId>xstream</artifactId>
        <version>${xstream.version}</version>
      </dependency>

      <dependency>
        <groupId>org.apache.jackrabbit</groupId>
        <artifactId>jackrabbit-api</artifactId>
        <version>${jackrabbit.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.jackrabbit</groupId>
        <artifactId>jackrabbit-core</artifactId>
        <version>${jackrabbit.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.jackrabbit</groupId>
        <artifactId>jackrabbit-spi</artifactId>
        <version>${jackrabbit.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.jackrabbit</groupId>
        <artifactId>jackrabbit-spi-commons</artifactId>
        <version>${jackrabbit.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.jackrabbit</groupId>
        <artifactId>jackrabbit-jcr-commons</artifactId>
        <version>${jackrabbit.version}</version>
      </dependency>

      <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-compress</artifactId>
        <version>${commons-compress.version}</version>
      </dependency>

      <dependency>
        <groupId>commons-fileupload</groupId>
        <artifactId>commons-fileupload</artifactId>
        <version>${commons-fileupload.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-vfs2</artifactId>
        <version>${commons-vfs2.version}</version>
      </dependency>
      <dependency>
        <groupId>com.amazonaws</groupId>
        <artifactId>aws-java-sdk-core</artifactId>
        <version>${aws-java-sdk.version}</version>
      </dependency>
      <dependency>
        <groupId>com.amazonaws</groupId>
        <artifactId>aws-java-sdk-s3</artifactId>
        <version>${aws-java-sdk.version}</version>
      </dependency>
      <dependency>
        <groupId>com.amazonaws</groupId>
        <artifactId>aws-java-sdk-iam</artifactId>
        <version>${aws-java-sdk.version}</version>
      </dependency>
      <dependency>
        <groupId>com.amazonaws</groupId>
        <artifactId>aws-java-sdk-emr</artifactId>
        <version>${aws-java-sdk.version}</version>
      </dependency>
      <dependency>
        <groupId>com.amazonaws</groupId>
        <artifactId>aws-java-sdk-pricing</artifactId>
        <version>${aws-java-sdk.version}</version>
      </dependency>
      <dependency>
        <groupId>com.amazonaws</groupId>
        <artifactId>aws-java-sdk-redshift</artifactId>
        <version>${aws-java-sdk.version}</version>
      </dependency>

      <dependency>
        <groupId>xerces</groupId>
        <artifactId>xercesImpl</artifactId>
        <version>${xercesImpl.version}</version>
      </dependency>
      <dependency>
        <groupId>xml-apis</groupId>
        <artifactId>xml-apis</artifactId>
        <version>${xml-apis.version}</version>
      </dependency>

      <dependency>
        <groupId>org.apache.httpcomponents</groupId>
        <artifactId>httpclient</artifactId>
        <version>${httpclient.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.httpcomponents</groupId>
        <artifactId>httpcore</artifactId>
        <version>${httpcore.version}</version>
      </dependency>

      <dependency>
        <groupId>org.apache.httpcomponents</groupId>
        <artifactId>httpclient-osgi</artifactId>
        <version>${httpclient.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.httpcomponents</groupId>
        <artifactId>httpcore-osgi</artifactId>
        <version>${httpcore.version}</version>
      </dependency>

      <dependency>
        <groupId>org.eclipse.paho</groupId>
        <artifactId>org.eclipse.paho.client.mqttv3</artifactId>
        <version>${paho.version}</version>
      </dependency>

      <dependency>
        <groupId>org.webjars.npm</groupId>
        <artifactId>requirejs</artifactId>
        <version>${requirejs.version}</version>
      </dependency>
      <dependency>
        <groupId>org.webjars.bower</groupId><!-- here we are using bower and not npm because the npm version only has source code -->
        <artifactId>jquery-ui</artifactId>
        <version>${jquery-ui.version}</version>
      </dependency>
      <dependency>
        <groupId>org.webjars.npm</groupId>
        <artifactId>fancyapps__fancybox</artifactId>
        <version>${fancyapps__fancybox.version}</version>
      </dependency>

      <dependency>
        <groupId>org.webjars.npm</groupId>
        <artifactId>bootstrap</artifactId>
        <version>${bootstrap.version}</version>
      </dependency>
      
      <dependency>
        <groupId>org.webjars.npm</groupId>
        <artifactId>jquery</artifactId>
        <version>${jquery.version}</version>
      </dependency>

      <dependency>
        <groupId>org.webjars.bower</groupId>
        <artifactId>angular</artifactId>
        <version>${angular.version}</version>
      </dependency>
      <dependency>
        <groupId>org.webjars.npm</groupId>
        <artifactId>angular-i18n</artifactId>
        <version>${angular.version}</version>
      </dependency>
      <dependency>
        <groupId>org.webjars.bower</groupId>
        <artifactId>angular-translate</artifactId>
        <version>${angular-translate.version}</version>
      </dependency>
      <dependency>
        <groupId>org.webjars.bower</groupId>
        <artifactId>angular-route</artifactId>
        <version>${angular.version}</version>
        <scope>runtime</scope>
      </dependency>
      <dependency>
        <groupId>org.webjars.bower</groupId>
        <artifactId>angular-sanitize</artifactId>
        <version>${angular.version}</version>
        <scope>runtime</scope>
      </dependency>
      <dependency>
        <groupId>org.webjars.bower</groupId>
        <artifactId>angular-animate</artifactId>
        <version>${angular.version}</version>
        <scope>runtime</scope>
      </dependency>
      <dependency>
        <groupId>org.webjars.bower</groupId>
        <artifactId>angular-ui-bootstrap-bower</artifactId>
        <version>${angular-ui-bootstrap-bower.version}</version>
        <exclusions>
          <exclusion>
            <groupId>*</groupId>
            <artifactId>*</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>org.webjars.npm</groupId>
        <artifactId>angular-mocks</artifactId>
        <version>${angular.version}</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>org.webjars.npm</groupId>
        <artifactId>uirouter__core</artifactId>
        <version>${uirouter-core.version}</version>
        <exclusions>
          <exclusion>
            <groupId>*</groupId>
            <artifactId>*</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>org.webjars.npm</groupId>
        <artifactId>uirouter__angularjs</artifactId>
        <version>${uirouter-angularjs.version}</version>
        <exclusions>
          <exclusion>
            <groupId>*</groupId>
            <artifactId>*</artifactId>
          </exclusion>
        </exclusions>
      </dependency>

      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-beans</artifactId>
        <version>${spring.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-context</artifactId>
        <version>${spring.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-context-support</artifactId>
        <version>${spring.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-tx</artifactId>
        <version>${spring.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-core</artifactId>
        <version>${spring.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-jdbc</artifactId>
        <version>${spring.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>${spring.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-websocket</artifactId>
        <version>${spring.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-web</artifactId>
        <version>${spring.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-test</artifactId>
        <version>${spring.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-expression</artifactId>
        <version>${spring.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-aop</artifactId>
        <version>${spring.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-orm</artifactId>
        <version>${spring.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework.osgi</groupId>
        <artifactId>spring-osgi-extender</artifactId>
        <version>${spring-osgi.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework.osgi</groupId>
        <artifactId>spring-osgi-core</artifactId>
        <version>${spring-osgi.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework.osgi</groupId>
        <artifactId>spring-osgi-io</artifactId>
        <version>${spring-osgi.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>se-jcr</artifactId>
        <version>${spring-se-jcr.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-mock</artifactId>
        <version>${spring-mock.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework.webflow</groupId>
        <artifactId>spring-binding</artifactId>
        <version>${spring-binding.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework.security</groupId>
        <artifactId>spring-security-core</artifactId>
        <version>${spring-security.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework.security</groupId>
        <artifactId>spring-security-core-tests</artifactId>
        <version>${spring-security-core-tests.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework.security</groupId>
        <artifactId>spring-security-acl</artifactId>
        <version>${spring-security.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework.security</groupId>
        <artifactId>spring-security-web</artifactId>
        <version>${spring-security.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework.security</groupId>
        <artifactId>spring-security-config</artifactId>
        <version>${spring-security.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework.security</groupId>
        <artifactId>spring-security-ldap</artifactId>
        <version>${spring-security.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework.security.kerberos</groupId>
        <artifactId>spring-security-kerberos-core</artifactId>
        <version>${spring-security-kerberos.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework.security.kerberos</groupId>
        <artifactId>spring-security-kerberos-web</artifactId>
        <version>${spring-security-kerberos.version}</version>
      </dependency>

      <dependency>
        <groupId>org.springframework.ldap</groupId>
        <artifactId>spring-ldap-core</artifactId>
        <version>${spring-ldap.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework.retry</groupId>
        <artifactId>spring-retry</artifactId>
        <version>${spring-retry.version}</version>
      </dependency>

      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
        <version>${spring-boot.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-websocket</artifactId>
        <version>${spring-boot.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-devtools</artifactId>
        <version>${spring-boot.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-test</artifactId>
        <version>${spring-boot.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-autoconfigure</artifactId>
        <version>${spring-boot.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot</artifactId>
        <version>${spring-boot.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-test</artifactId>
        <version>${spring-boot.version}</version>
      </dependency>

      <dependency>
        <groupId>org.codehaus.enunciate</groupId>
        <artifactId>enunciate-jersey-rt</artifactId>
        <version>${enunciate-jersey-rt.version}</version>
        <exclusions>
          <exclusion>
            <groupId>javax.mail</groupId>
            <artifactId>mail</artifactId>
          </exclusion>
        </exclusions>
      </dependency>

    </dependencies>
  </dependencyManagement>

  <distributionManagement>
    <repository>
      <id>pentaho.public.release.repo</id>
      <name>Pentaho Public Release Repository</name>
      <url>${pentaho.public.release.repo}</url>
    </repository>
    <snapshotRepository>
      <id>pentaho.public.snapshot.repo</id>
      <name>Pentaho Public Snapshot Repository</name>
      <url>${pentaho.public.snapshot.repo}</url>
    </snapshotRepository>
  </distributionManagement>

  <repositories>
    <repository>
      <id>pentaho-public</id>
      <name>Pentaho Resolve Repo</name>
      <url>${pentaho.resolve.repo}</url>
      <releases>
        <enabled>true</enabled>
        <updatePolicy>daily</updatePolicy>
      </releases>
      <snapshots>
        <enabled>true</enabled>
        <updatePolicy>daily</updatePolicy>
      </snapshots>
    </repository>
  </repositories>
  <pluginRepositories>
    <pluginRepository>
      <id>pentaho-public</id>
      <name>Pentaho Resolve Repo</name>
      <url>${pentaho.resolve.repo}</url>
      <releases>
        <enabled>true</enabled>
        <updatePolicy>daily</updatePolicy>
      </releases>
      <snapshots>
        <enabled>true</enabled>
        <updatePolicy>daily</updatePolicy>
      </snapshots>
    </pluginRepository>
  </pluginRepositories>

  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.felix</groupId>
          <artifactId>maven-bundle-plugin</artifactId>
          <version>${maven-bundle-plugin.version}</version>
          <extensions>true</extensions>
          <configuration>
            <instructions>
              <!-- Required for generic jar version checking -->
              <Implementation-Version>${project.version}</Implementation-Version>
            </instructions>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.hitachivantara.karaf.tooling</groupId>
          <artifactId>karaf-maven-plugin</artifactId>
          <version>${hitachi-karaf-maven-plugin.version}</version>

          <executions>
            <execution>
              <id>default-features-generate-descriptor</id>
              <phase>compile</phase>
              <configuration>
                <enableGeneration>${karaf-maven-plugin.enableGeneration}</enableGeneration>
                <aggregateFeatures>${karaf-maven-plugin.aggregateFeatures}</aggregateFeatures>
	              <includeTransitiveDependency>${karaf-maven-plugin.includeTransitiveDependency}</includeTransitiveDependency>
                <addBundlesToPrimaryFeature>${karaf-maven-plugin.addBundlesToPrimaryFeature}</addBundlesToPrimaryFeature>
                <markTransitiveAsDependency>${karaf-maven-plugin.markTransitiveAsDependency}</markTransitiveAsDependency>
                <primaryFeatureName>${karaf-maven-plugin.primaryFeatureName}</primaryFeatureName>
                <prerequisiteFeatures>${karaf-maven-plugin.prerequisiteFeatures}</prerequisiteFeatures>
              </configuration>
            </execution>
            <execution>
              <id>default-assembly</id>
              <configuration>
                <extraProtocols>
                  <param>pentaho-webjars</param>
                  <param>pentaho-platform-plugin</param>
                </extraProtocols>
                <!-- override expected osgi.ee to match compilation target -->
                <javase>${source.jdk.version}</javase>
              </configuration>
            </execution>
            <execution>
              <id>default-archive</id>
              <configuration>
                <archiveTarGz>${karaf-maven-plugin.archiveTarGz}</archiveTarGz>
                <archiveZip>${karaf-maven-plugin.archiveZip}</archiveZip>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>${maven-resources-plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-remote-resources-plugin</artifactId>
          <version>${maven-remote-resources-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.jacoco</groupId>
          <artifactId>jacoco-maven-plugin</artifactId>
          <version>${jacoco-maven-plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-source-plugin</artifactId>
          <version>${maven-source-plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>${maven-surefire-plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-report-plugin</artifactId>
          <version>${maven-surefire-report-plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-failsafe-plugin</artifactId>
          <version>${maven-failsafe-plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-project-info-reports-plugin</artifactId>
          <version>${maven-project-info-reports-plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-jxr-plugin</artifactId>
          <version>${maven-jxr-plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-javadoc-plugin</artifactId>
          <version>${maven-javadoc-plugin.version}</version>
          <configuration>
            <doclint>none</doclint>
          </configuration>
        </plugin>

        <plugin>
          <artifactId>maven-checkstyle-plugin</artifactId>
          <version>${maven-checkstyle-plugin.version}</version>
          <dependencies>
            <dependency>
              <groupId>com.puppycrawl.tools</groupId>
              <artifactId>checkstyle</artifactId>
              <version>${checkstyle.version}</version>
            </dependency>
            <dependency>
              <groupId>org.pentaho</groupId>
              <artifactId>coding-standards</artifactId>
              <version>${coding-standards.version}</version>
              <type>zip</type>
            </dependency>
          </dependencies>
          <configuration>
            <configLocation>${checkstyle.configLocation}</configLocation>
            <linkXRef>${checkstyle.linkXRef}</linkXRef>
            <consoleOutput>${checkstyle.consoleOutput}</consoleOutput>
            <cacheFile/>
          </configuration>
        </plugin>

        <plugin>
          <groupId>com.github.spotbugs</groupId>
          <artifactId>spotbugs-maven-plugin</artifactId>
          <version>${spotbugs.version}</version>
          <configuration>
            <includeFilterFile>findbugs/pentaho_checks.xml</includeFilterFile>
          </configuration>
          <dependencies>
            <dependency>
              <groupId>org.pentaho</groupId>
              <artifactId>coding-standards</artifactId>
              <version>${coding-standards.version}</version>
              <type>zip</type>
            </dependency>
          </dependencies>
        </plugin>

        <plugin>
          <groupId>org.sonarsource.scanner.maven</groupId>
          <artifactId>sonar-maven-plugin</artifactId>
          <version>${sonar-maven-plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-verifier-plugin</artifactId>
          <version>${maven-verifier-plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-jar-plugin</artifactId>
          <version>${maven-jar-plugin.version}</version>
          <configuration>
            <archive>
              <manifest>
                <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
              </manifest>
              <manifestEntries>
                <Source-Java-Version>${source.jdk.version}</Source-Java-Version>
                <Target-Java-Version>${target.jdk.version}</Target-Java-Version>
                <Implementation-ProductID>${project.artifactId}</Implementation-ProductID>
              </manifestEntries>
            </archive>
          </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>${maven-compiler-plugin.version}</version>
          <configuration>
            <source>${source.jdk.version}</source>
            <target>${target.jdk.version}</target>
            <compilerArgument>${compilerArgument}</compilerArgument>
          </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>${maven-clean-plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-dependency-plugin</artifactId>
          <version>${maven-dependency-plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>${maven-install-plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>${maven-deploy-plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-release-plugin</artifactId>
          <version>${maven-release-plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-site-plugin</artifactId>
          <version>${maven-site-plugin.version}</version>
          <dependencies>
            <dependency>
              <groupId>org.apache.maven.wagon</groupId>
              <artifactId>wagon-webdav-jackrabbit</artifactId>
              <version>2.10</version>
            </dependency>
          </dependencies>
        </plugin>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>build-helper-maven-plugin</artifactId>
          <version>${build-helper-maven-plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-assembly-plugin</artifactId>
          <version>${maven-assembly-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>com.github.bringking</groupId>
          <artifactId>requirejs-maven-plugin</artifactId>
          <version>${requirejs-maven-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>com.github.eirslett</groupId>
          <artifactId>frontend-maven-plugin</artifactId>
          <version>${frontend-maven-plugin.version}</version>
          <configuration>
            <workingDirectory>${frontend-maven-plugin.workingDirectory}</workingDirectory>
            <installDirectory>${frontend-maven-plugin.installDirectory}</installDirectory>
            <nodeVersion>${nodejs.version}</nodeVersion>
            <npmVersion>${npm.version}</npmVersion>
          </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-antrun-plugin</artifactId>
          <version>${maven-antrun-plugin.version}</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>${maven-war-plugin.version}</version>
          <configuration>
            <failOnMissingWebXml>false</failOnMissingWebXml>
          </configuration>
        </plugin>
        <plugin>
          <groupId>com.soebes.maven.plugins</groupId>
          <artifactId>iterator-maven-plugin</artifactId>
          <version>${iterator-maven-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.pentaho.maven.plugins</groupId>
          <artifactId>license-helper-maven-plugin</artifactId>
          <version>${license-helper-maven-plugin.version}</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <plugin>
        <artifactId>maven-checkstyle-plugin</artifactId>
      </plugin>
      <plugin>
        <artifactId>maven-javadoc-plugin</artifactId>
      </plugin>
      <plugin>
        <artifactId>maven-release-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>set-doc-version-property</id>
            <goals>
              <goal>parse-version</goal>
            </goals>
          </execution>
          <execution>
            <id>set-root-dir-property</id>
            <goals>
              <goal>rootlocation</goal>
            </goals>
            <configuration>
              <rootLocationProperty>project.rootdir</rootLocationProperty>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-site-plugin</artifactId>
        <executions>
          <execution>
            <id>attach-site-descriptor</id>
            <goals>
              <goal>attach-descriptor</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.pentaho.maven.plugins</groupId>
        <artifactId>license-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>bundle-license</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>bundle</goal>
            </goals>
          </execution>
          <execution>
            <id>check-license</id>
            <phase>validate</phase>
            <goals>
              <goal>check-license</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>

  <profiles>
    <profile>
      <id>filtered-resources</id>
      <activation>
        <file>
          <exists>${basedir}/src/main/resources-filtered</exists>
        </file>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>build-helper-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>add-filtered-resources</id>
                <goals>
                  <goal>add-resource</goal>
                </goals>
                <configuration>
                  <resources>
                    <resource>
                      <directory>src/main/resources-filtered</directory>
                      <filtering>true</filtering>
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>clean-node-modules</id>
      <activation>
        <property>
          <name>!skipNodeClean</name>
        </property>
        <file>
          <exists>node_modules</exists>
        </file>
      </activation>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-clean-plugin</artifactId>
            <version>${maven-clean-plugin.version}</version>
            <configuration>
              <filesets>
                <fileset>
                  <directory>node_modules</directory>
                  <followSymlinks>false</followSymlinks>
                </fileset>
              </filesets>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>node-npm</id>
      <activation>
        <file>
          <exists>${basedir}/package.json</exists>
        </file>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>com.github.eirslett</groupId>
            <artifactId>frontend-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>node-npm_install</id>
                <phase>${node-npm_install-phase}</phase>
                <goals>
                  <goal>install-node-and-npm</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>javascript-dependencies</id>
      <activation>
        <property>
          <name>!skipDefault</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>com.soebes.maven.plugins</groupId>
            <artifactId>iterator-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>javascript-dependencies_unpack-dependencies</id>
                <phase>${javascript_unpack-dependencies-phase}</phase>
                <goals>
                  <goal>iterator</goal>
                </goals>
                <configuration>
                  <content>${js.project.list}</content>
                  <pluginExecutors>
                    <pluginExecutor>
                      <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                      </plugin>
                      <goal>unpack-dependencies</goal>
                      <configuration>
                        <includeArtifactIds>${item}</includeArtifactIds>
                        <includes>**/**</includes>
                      </configuration>
                    </pluginExecutor>
                  </pluginExecutors>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>override-pentaho-js-build</id>
      <activation>
        <file>
          <exists>${build.javascriptConfigDirectory}/profileBuilder.js</exists>
        </file>
      </activation>

      <properties>
        <dependency.pentaho-js-build.revision>2.0.1</dependency.pentaho-js-build.revision>
      </properties>

      <dependencies>
        <dependency>
          <groupId>pentaho</groupId>
          <artifactId>pentaho-js-build</artifactId>
          <version>${dependency.pentaho-js-build.revision}</version>
          <type>zip</type>
        </dependency>
      </dependencies>

      <build>
        <plugins>
          <plugin>
            <artifactId>maven-dependency-plugin</artifactId>

            <executions>
              <execution>
                <id>override-pentaho-js-build_unpack-dependencies</id>
                <phase>${javascript_unpack-dependencies-phase}</phase>
                <goals>
                  <goal>unpack-dependencies</goal>
                </goals>
                <configuration>
                  <includeArtifactIds>pentaho-js-build</includeArtifactIds>
                  <includes>**/**</includes>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <artifactId>maven-resources-plugin</artifactId>

            <executions>
              <execution>
                <id>override-pentaho-js-build_override-profilebuilder</id>
                <phase>${javascript_override-profilebuilder-phase}</phase>

                <goals>
                  <goal>copy-resources</goal>
                </goals>

                <configuration>
                  <outputDirectory>${pentaho-js-build.dir}</outputDirectory>
                  <resources>
                    <resource>
                      <directory>${build.javascriptConfigDirectory}</directory>

                      <filtering>true</filtering>

                      <includes>
                        <include>profileBuilder.js</include>
                      </includes>
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>javascript-requirecfg</id>
      <activation>
        <file>
          <exists>${build.javascriptConfigDirectory}/context.js</exists>
        </file>
      </activation>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>
              <execution>
                <id>javascript-requirecfg_aggregate</id>
                <phase>${javascript-requirecfg_aggregate-phase}</phase>
                <goals>
                  <goal>run</goal>
                </goals>
                <configuration>
                  <target>
                    <concat destfile="${project.build.directory}/requireCfg.js" force="yes" append="true">
                      <file file="${build.javascriptConfigDirectory}/context.js" />
                      <fileset casesensitive="yes" dir="${build.dependenciesDirectory}">
                        <include name="${requirejs.config.files.pattern}" />
                      </fileset>
                    </concat>
                    <path id="build.classpath">
                      <fileset dir="${pentaho-js-build.dir}/libs">
                        <include name="*.jar" />
                      </fileset>
                    </path>
                    <java fork="true" classname="org.mozilla.javascript.tools.shell.Main" classpathref="build.classpath">
                      <arg value="${pentaho-js-build.dir}/profileBuilder.js" />
                    </java>
                  </target>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>javascript-bundle</id>
      <activation>
        <file>
          <exists>${build.javascriptConfigDirectory}/${requirejs.build.file}</exists>
        </file>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>com.github.eirslett</groupId>
            <artifactId>frontend-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>node-npm_install</id>
                <phase>${node-npm_install-phase}</phase>
                <goals>
                  <goal>install-node-and-npm</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
              <execution>
                <id>javascript_unpack-rjs</id>
                <phase>${javascript_unpack-rjs-phase}</phase>
                <goals>
                  <goal>unpack</goal>
                </goals>
                <configuration>
                  <artifactItems>
                    <artifactItem>
                      <groupId>org.webjars.npm</groupId>
                      <artifactId>requirejs</artifactId>
                      <includes>**/r.js</includes>
                    </artifactItem>
                  </artifactItems>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>com.github.bringking</groupId>
            <artifactId>requirejs-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>javascript-bundle_optimize</id>
                <phase>${javascript_optimize-phase}</phase>

                <goals>
                  <goal>optimize</goal>
                </goals>

                <configuration>
                  <nodeExecutable>${frontend-maven-plugin.installDirectory}/node/node</nodeExecutable>
                  <optimizerFile>${rjs.webjar.file}</optimizerFile>
                  <configFile>${build.javascriptConfigDirectory}/${requirejs.build.file}</configFile>
                  <filterConfig>true</filterConfig>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>javascript-test</id>
      <activation>
        <property>
          <name>!maven.test.skip</name>
        </property>
        <file>
          <exists>${build.javascriptTestSourceDirectory}</exists>
        </file>
      </activation>
      <properties>
        <karma.file.config>karma.ci.conf.js</karma.file.config>
      </properties>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-resources-plugin</artifactId>
            <executions>
              <execution>
                <id>javascript-test_copy-resources</id>
                <phase>${javascript-test_copy-resources-phase}</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>${project.build.directory}/test-javascript</outputDirectory>
                  <resources>
                    <resource>
                      <directory>${build.javascriptSourceDirectory}</directory>
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>com.github.eirslett</groupId>
            <artifactId>frontend-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>node-npm_install</id>
                <phase>${node-npm_install-phase}</phase>
                <goals>
                  <goal>install-node-and-npm</goal>
                </goals>
              </execution>
              <execution>
                <id>javascript-test_npm-install</id>
                <phase>${javascript-test_npm-install-phase}</phase>
                <goals>
                  <goal>npm</goal>
                </goals>
                <configuration>
                  <arguments>install</arguments>
                  <workingDirectory>${frontend-maven-plugin.installDirectory}</workingDirectory>
                </configuration>
              </execution>
              <execution>
                <id>javascript-test_karma</id>
                <phase>${javascript-test_karma-phase}</phase>
                <goals>
                  <goal>karma</goal>
                </goals>
                <configuration>
                  <karmaConfPath>${build.javascriptTestConfigDirectory}/${karma.file.config}</karmaConfPath>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>javascript-doc</id>
      <activation>
        <property>
          <name>!maven.jsdoc.skip</name>
        </property>
        <file>
          <exists>${basedir}/src/doc/javascript/config/${docjs.config.file}</exists>
        </file>
      </activation>
      <properties>
        <jsdoc3-maven-plugin.version>1.2.0</jsdoc3-maven-plugin.version>
        <docjs.config.includePrivate>false</docjs.config.includePrivate>
      </properties>
      <build>
        <pluginManagement>
          <plugins>
            <plugin>
              <groupId>com.phasebash.jsdoc</groupId>
              <artifactId>jsdoc3-maven-plugin</artifactId>
              <version>${jsdoc3-maven-plugin.version}</version>
            </plugin>
          </plugins>
        </pluginManagement>
        <plugins>
          <plugin>
            <artifactId>maven-resources-plugin</artifactId>
            <executions>
              <execution>
                <id>javascript-doc_copy-resources</id>
                <phase>${javascript-doc_copy-resources-phase}</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <overwrite>true</overwrite>
                  <outputDirectory>${project.build.directory}</outputDirectory>
                  <resources>
                    <resource>
                      <directory>${basedir}/src/doc/javascript/config</directory>
                      <filtering>true</filtering>
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
      <reporting>
        <plugins>
          <plugin>
            <groupId>com.phasebash.jsdoc</groupId>
            <artifactId>jsdoc3-maven-plugin</artifactId>
            <configuration>
              <configFile>${project.build.directory}/${docjs.config.file}</configFile>
              <includePrivate>${docjs.config.includePrivate}</includePrivate>
              <!--
                 The jsdoc3 maven plugin requires the directoryRoots or sourceFiles defined
                 as a work around we are defining the source file as the config file to enable
                 the plugin and don't cause side effects on upstream projects configuration files
              -->
              <sourceFiles>
                <sourceFile>${project.build.directory}/${docjs.config.file}</sourceFile>
              </sourceFiles>
            </configuration>
          </plugin>
        </plugins>
      </reporting>
    </profile>

    <profile>
      <id>assembly</id>
      <activation>
        <file>
          <exists>${basedir}/src/assembly/assembly.xml</exists>
        </file>
      </activation>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-assembly-plugin</artifactId>
            <executions>
              <execution>
                <id>assembly_package</id>
                <phase>${assembly_package-phase}</phase>
                <goals>
                  <goal>single</goal>
                </goals>
                <configuration>
                  <descriptorSourceDirectory>${basedir}/src/assembly</descriptorSourceDirectory>
                  <appendAssemblyId>${assembly_appendId}</appendAssemblyId>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <!-- This profile generates a feature file to deploy in karaf. -->
      <id>feature-generation</id>
      <activation>
        <file>
          <exists>${basedir}/src/main/feature</exists>
        </file>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.hitachivantara.karaf.tooling</groupId>
            <artifactId>karaf-maven-plugin</artifactId>

            <extensions>true</extensions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <!-- Add ssh feature to SNAPSHOT assemblies -->
      <id>ssh-feature</id>
      <activation>
        <property>
          <name>!release</name>
        </property>
      </activation>
      <build>
        <pluginManagement>
          <plugins>
            <plugin>
              <groupId>org.hitachivantara.karaf.tooling</groupId>
              <artifactId>karaf-maven-plugin</artifactId>
              <executions>
                <execution>
                  <id>default-assembly</id>
                  <configuration>
                    <bootFeatures>
                      <feature>ssh</feature>
                    </bootFeatures>
                  </configuration>
                </execution>
              </executions>
            </plugin>
          </plugins>
        </pluginManagement>
      </build>
    </profile>

    <profile>
      <id>eula-wrap</id>
      <activation>
        <property>
          <name>eula-wrap</name>
        </property>
      </activation>
      <properties>
        <artifactName>${project.artifactId}-${project.version}</artifactName>
        <artifactExtension>${project.extension}</artifactExtension>
        <izpack-file>${pentaho:pentaho-eula-wrap-config:xml:izpack-zip}</izpack-file>
        <izpack-maven-plugin.version>5.1.3</izpack-maven-plugin.version>
      </properties>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
              <execution>
                <id>eula-wrap_assign-deps-to-properties</id>
                <phase>${eula-wrap_assign-deps-to-properties-phase}</phase>
                <goals>
                  <goal>properties</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.izpack</groupId>
            <artifactId>izpack-maven-plugin</artifactId>
            <version>${izpack-maven-plugin.version}</version>
            <executions>
              <execution>
                <id>eula-wrap_create-izpack-installer-jar</id>
                <phase>${eula-wrap_create-izpack-installer-jar-phase}</phase>
                <goals>
                  <goal>izpack</goal>
                </goals>
                <configuration>
                  <baseDir>${project.build.directory}</baseDir>
                  <kind>standard</kind>
                  <installFile>${izpack-file}</installFile>
                  <finalName>installer</finalName>
                  <enableAttachArtifact>false</enableAttachArtifact>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>
              <execution>
                <id>eula-wrap_create-dist</id>
                <phase>${eula-wrap_create-dist-phase}</phase>
                <goals>
                  <goal>run</goal>
                </goals>
                <configuration>
                  <target>
                    <zip destfile="${project.build.directory}/${project.artifactId}-${project.version}-dist.zip" preserve0permissions="true">
                      <zipfileset file="${pentaho:pentaho-eula-wrap-config:txt:README}" fullpath="${artifactName}/README.txt" />
                      <zipfileset file="${pentaho:pentaho-eula-wrap-config:bat:install}" fullpath="${artifactName}/install.bat" />
                      <zipfileset file="${pentaho:pentaho-eula-wrap-config:sh:install}" fullpath="${artifactName}/install.sh" filemode="755" />
                      <zipfileset file="${pentaho:pentaho-eula-wrap-config:txt:eula}" fullpath="${artifactName}/license.txt" />
                      <zipfileset fullpath="${artifactName}/installer.jar" includes="installer.jar" dir="${project.build.directory}" />
                    </zip>
                    <delete file="${project.build.directory}/installer.jar" />
                  </target>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>build-helper-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>eula-wrap_attach-dist</id>
                <phase>${eula-wrap_attach-dist-phase}</phase>
                <goals>
                  <goal>attach-artifact</goal>
                </goals>
                <configuration>
                  <artifacts>
                    <artifact>
                      <file>${project.build.directory}/${project.artifactId}-${project.version}-dist.zip</file>
                      <classifier>dist</classifier>
                      <type>zip</type>
                    </artifact>
                  </artifacts>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
      <dependencies>
        <dependency>
          <groupId>pentaho</groupId>
          <artifactId>pentaho-eula-wrap-config</artifactId>
          <version>${pentaho-eula-wrap-config.version}</version>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>pentaho</groupId>
          <artifactId>pentaho-eula-wrap-config</artifactId>
          <version>${pentaho-eula-wrap-config.version}</version>
          <type>xml</type>
          <classifier>izpack-zip</classifier>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>pentaho</groupId>
          <artifactId>pentaho-eula-wrap-config</artifactId>
          <version>${pentaho-eula-wrap-config.version}</version>
          <type>xml</type>
          <classifier>izpack-kar</classifier>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>pentaho</groupId>
          <artifactId>pentaho-eula-wrap-config</artifactId>
          <version>${pentaho-eula-wrap-config.version}</version>
          <type>bat</type>
          <classifier>install</classifier>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>pentaho</groupId>
          <artifactId>pentaho-eula-wrap-config</artifactId>
          <version>${pentaho-eula-wrap-config.version}</version>
          <type>sh</type>
          <classifier>install</classifier>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>pentaho</groupId>
          <artifactId>pentaho-eula-wrap-config</artifactId>
          <version>${pentaho-eula-wrap-config.version}</version>
          <type>txt</type>
          <classifier>README</classifier>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>pentaho</groupId>
          <artifactId>pentaho-eula-wrap-config</artifactId>
          <version>${pentaho-eula-wrap-config.version}</version>
          <type>txt</type>
          <classifier>eula</classifier>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>pentaho</groupId>
          <artifactId>pentaho-eula-wrap-config</artifactId>
          <version>${pentaho-eula-wrap-config.version}</version>
          <type>html</type>
          <classifier>eula</classifier>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>pentaho</groupId>
          <artifactId>pentaho-eula-wrap-config</artifactId>
          <version>${pentaho-eula-wrap-config.version}</version>
          <type>png</type>
          <classifier>izpack-sidebar</classifier>
          <scope>test</scope>
        </dependency>
      </dependencies>
    </profile>

    <profile>
      <id>sonatype</id>
      <activation>
        <property>
          <name>sonatype</name>
        </property>
      </activation>
      <distributionManagement>
        <repository>
          <id>sonatype.staging.repo</id>
          <name>Maven Central Release Staging</name>
          <url>https://oss.sonatype.org/service/local/staging/deploy/maven2</url>
        </repository>
        <snapshotRepository>
          <id>sonatype.snapshot.repo</id>
          <name>Sonatype Snapshots</name>
          <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        </snapshotRepository>
      </distributionManagement>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-gpg-plugin</artifactId>
            <version>1.6</version>
            <executions>
              <execution>
                <id>sign-artifacts</id>
                <phase>verify</phase>
                <goals>
                  <goal>sign</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>audit</id>
      <activation>
        <property>
          <name>audit</name>
        </property>
      </activation>
      <properties>
        <checkstyle.consoleOutput>false</checkstyle.consoleOutput>
        <checkstyle.linkXRef>false</checkstyle.linkXRef>
        <test-unit-jacoco-agent-prep-phase>initialize</test-unit-jacoco-agent-prep-phase>
        <test-unit-jacoco-report-phase>verify</test-unit-jacoco-report-phase>
        <!-- disabled by default, will be enabled if runITs -->
        <test-integration_jacoco-agent-prep-phase/>
        <test-integration_jacoco-report-phase/>
      </properties>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-checkstyle-plugin</artifactId>
            <executions>
              <execution>
                <id>checkstyle</id>
                <phase>validate</phase>
                <goals>
                  <goal>checkstyle</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>test-unit-jacoco-agent-prep</id>
                <phase>${test-unit-jacoco-agent-prep-phase}</phase>
                <goals>
                  <goal>prepare-agent</goal>
                </goals>
                <configuration>
                  <propertyName>jacocoSurefireArgLine</propertyName>
                </configuration>
              </execution>
              <execution>
                <id>test-unit-jacoco-report</id>
                <phase>${test-unit-jacoco-report-phase}</phase>
                <goals>
                  <goal>report</goal>
                </goals>
              </execution>
              <!-- integration tests -->
              <execution>
                <id>test-integration_jacoco-agent-prep</id>
                <phase>${test-integration_jacoco-agent-prep-phase}</phase>
                <goals>
                  <goal>prepare-agent-integration</goal>
                </goals>
                <configuration>
                  <propertyName>jacocoFailsafeArgLine</propertyName>
                </configuration>
              </execution>
              <execution>
                <id>test-integration_jacoco-report</id>
                <phase>${test-integration_jacoco-report-phase}</phase>
                <goals>
                  <goal>report-integration</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>spotbugs</id>
      <build>
        <plugins>
          <plugin>
            <groupId>com.github.spotbugs</groupId>
            <artifactId>spotbugs-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>spotbugs-check</id>
                <phase>verify</phase>
                <goals>
                  <goal>check</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>reporting</id>
      <activation>
        <property>
          <name>!maven.test.skip</name>
        </property>
      </activation>
      <reporting>
        <plugins>
          <plugin>
            <artifactId>maven-project-info-reports-plugin</artifactId>
            <configuration>
              <dependencyLocationsEnabled>false</dependencyLocationsEnabled>
            </configuration>
          </plugin>
          <plugin>
            <artifactId>maven-jxr-plugin</artifactId>
            <reportSets>
              <reportSet>
                <id>jxr</id>
                <reports>
                  <report>jxr</report>
                </reports>
              </reportSet>
            </reportSets>
            <configuration>
              <linkJavadoc>true</linkJavadoc>
            </configuration>
          </plugin>
          <plugin>
            <artifactId>maven-javadoc-plugin</artifactId>
            <reportSets>
              <reportSet>
                <id>javadoc</id>
                <reports>
                  <report>javadoc</report>
                </reports>
              </reportSet>
            </reportSets>
            <configuration>
              <failOnError>false</failOnError>
            </configuration>
          </plugin>
            <plugin>
              <artifactId>maven-checkstyle-plugin</artifactId>
              <reportSets>
                <reportSet>
                  <id>checkstyle</id>
                  <reports>
                    <report>checkstyle</report>
                  </reports>
                </reportSet>
              </reportSets>
              <configuration>
                <consoleOutput>false</consoleOutput>
                <linkXRef>true</linkXRef>
              </configuration>
            </plugin>
          <plugin>
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
          </plugin>
          <plugin>
            <artifactId>maven-surefire-report-plugin</artifactId>
            <reportSets>
              <reportSet>
                <id>unit-tests</id>
                <reports>
                  <report>report-only</report>
                </reports>
              </reportSet>
              <reportSet>
                <id>integration-tests</id>
                <reports>
                  <report>failsafe-report-only</report>
                </reports>
              </reportSet>
            </reportSets>
            <configuration>
              <linkXRef>true</linkXRef>
            </configuration>
          </plugin>
          <plugin>
            <artifactId>maven-site-plugin</artifactId>
          </plugin>
        </plugins>
      </reporting>
    </profile>

    <profile>
      <id>appscan</id>
      <build>
        <pluginManagement>
          <plugins>
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-compiler-plugin</artifactId>
              <version>${maven-compiler-plugin.version}</version>
              <configuration>
                <debug>true</debug>
                <debuglevel>lines,vars,source</debuglevel>
              </configuration>
            </plugin>
          </plugins>
        </pluginManagement>
        <plugins>
          <plugin>
            <groupId>com.hcl.security</groupId>
            <artifactId>appscan-maven-plugin</artifactId>
            <version>${appscan-maven-plugin.version}</version>
            <executions>
              <execution>
                <id>appscan-prepare</id>
                <phase>package</phase>
                <goals>
                  <goal>prepare</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
